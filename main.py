import base64

base64_code = """
#!/bin/bash
python3 - <<'END_OF_PYTHON'
_G='version'
_F='github'
_E='channel'
_D='email'
_C='login'
_B='dashboard'
_A=True
import flet as ft
from api import CPMClient
import global_state,time,traceback
class CPMTool:
	def __init__(A):
		A.client=CPMClient()
		if global_state.get_token():A.current_view=_B;print('Found existing session, starting in dashboard mode')
		else:A.current_view=_C;print('No existing session found, starting in login mode')
		A.current_page=_B;A.dark_theme=_A;A.creator_info={'name':'BRZ HACK',_E:'https://t.me/+Z8ld8FHFO5k1YmQy',_F:'https://t.me/woxdev',_D:'None',_G:'1.0.0'}
	def main(A,page):
		A1='Features';A0='Currency';z='100';y='Coin';x='LocalID';w='all';v='fog';u='light';t='engine';s='Please enter a valid number';r='User';q='Username';p='Switch to light theme';o='purple';h='Rank';e='Money';g='features';f='currency';a='0';Z='Name';Y='BRZ-Tool';S='About';R=None;Q='rank';N='N/A';M='about';H=False;G='red';F='md';D='sm';C='xs';B=page;B.title=Y;B.window_width=1000;B.window_height=700;B.padding=0;B.theme_mode=ft.ThemeMode.DARK;B.theme=ft.Theme(color_scheme_seed=o,visual_density=ft.VisualDensity.COMFORTABLE,use_material3=_A);AL=ft.Theme(color_scheme_seed=o,visual_density=ft.VisualDensity.COMFORTABLE,use_material3=_A)
		def A2(e):A.dark_theme=not A.dark_theme;B.theme_mode=ft.ThemeMode.DARK if A.dark_theme else ft.ThemeMode.LIGHT;B.update();T.icon=ft.icons.DARK_MODE if A.dark_theme else ft.icons.LIGHT_MODE;T.tooltip=p if A.dark_theme else'Switch to dark theme';B.update()
		T=ft.IconButton(icon=ft.icons.DARK_MODE,tooltip=p,on_click=A2,icon_color=ft.colors.PURPLE_ACCENT,icon_size=24);B.scroll=ft.ScrollMode.AUTO
		def J(page):
			if page.width<=700:return _A
			return H
		def E(message,color='green'):B.snack_bar=ft.SnackBar(content=ft.Text(message),bgcolor=color,action='OK');B.snack_bar.open=_A;B.update()
		O=ft.TextField(label=q,autofocus=_A,prefix_icon=ft.icons.PERSON,expand=_A,border_radius=10,text_size=16,filled=_A,hint_text='Введите ваш email',height=60);U=ft.TextField(label='Password',password=_A,can_reveal_password=_A,prefix_icon=ft.icons.LOCK,expand=_A,border_radius=10,text_size=16,filled=_A,hint_text='Введите ваш пароль',height=60);K=ft.ProgressRing(width=24,height=24,visible=H,stroke_width=3)
		async def A3(e):
			try:
				if not O.value or not U.value:E('Please fill in all fields',G);return
				K.visible=_A;L.disabled=_A;B.update();print(f"Attempting login with username: {O.value}");D,I=A.client.login(O.value,U.value)
				if D:
					print('Login successful, getting user info...');D,F=A.client.get_info()
					if D:print(f"Got user info: {F}");E(f"Добро пожаловать, {F.get(Z,r)}!");A.current_view=_B;A.current_page=_B;B.controls.clear();B.add(X())
					else:C=f"Error getting user info: {F}";print(C);E(C,G);K.visible=H;L.disabled=H;B.update()
				else:C=f"Login failed: {I}";print(C);E(C,G);K.visible=H;L.disabled=H;B.update()
			except Exception as e:C=f"Error during login: {str(e)}";print(C);print(traceback.format_exc());E(C,G);K.visible=H;L.disabled=H;B.update()
		L=ft.ElevatedButton('Login',icon=ft.icons.LOGIN,on_click=A3,style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=8),elevation=5,color=ft.colors.WHITE,bgcolor=ft.colors.BLUE),expand=_A,height=55)
		def b():A=J(B);C=min(B.width*.9,450)if A else 450;D=ft.Animation(curve=ft.AnimationCurve.EASE_OUT_BACK,duration=800);E=ft.Container(content=ft.Column([ft.Container(content=ft.Icon(name=ft.icons.SHIELD_OUTLINED,size=70,color=ft.colors.BLUE),border_radius=50,padding=20,bgcolor=ft.colors.SURFACE_VARIANT,shadow=ft.BoxShadow(spread_radius=0,blur_radius=20,color=ft.colors.with_opacity(.2,ft.colors.BLUE_ACCENT),offset=ft.Offset(0,5))),ft.Text(Y,size=40,weight=ft.FontWeight.BOLD,text_align=ft.TextAlign.CENTER),ft.Container(height=10),ft.Text('Введите данные от вашего аккаунта',size=16,opacity=.8,text_align=ft.TextAlign.CENTER,color=ft.colors.ON_SURFACE_VARIANT)],alignment=ft.MainAxisAlignment.CENTER,horizontal_alignment=ft.CrossAxisAlignment.CENTER,spacing=15),margin=ft.margin.only(bottom=30),padding=20,animate=D);F=ft.Animation(curve=ft.AnimationCurve.EASE_OUT,duration=500);G=ft.Container(content=ft.Column([O,ft.Container(height=15),U,ft.Container(height=25),ft.Container(content=ft.Row([L,ft.Container(width=10),K],alignment=ft.MainAxisAlignment.CENTER),margin=ft.margin.symmetric(horizontal=15)),ft.Container(height=15)],alignment=ft.MainAxisAlignment.CENTER,horizontal_alignment=ft.CrossAxisAlignment.CENTER,spacing=0),width=C,padding=ft.padding.all(30),border_radius=20,gradient=ft.LinearGradient(begin=ft.alignment.top_center,end=ft.alignment.bottom_center,colors=[ft.colors.SURFACE,ft.colors.SURFACE_VARIANT]),shadow=ft.BoxShadow(spread_radius=1,blur_radius=25,color=ft.colors.with_opacity(.2,ft.colors.BLACK),offset=ft.Offset(0,10)),animate=F,animate_opacity=200);return ft.Container(content=ft.Column([ft.Container(content=ft.Row([ft.Text('v1.0',italic=_A,size=12,color=ft.colors.ON_SURFACE_VARIANT),T],alignment=ft.MainAxisAlignment.SPACE_BETWEEN),padding=ft.padding.only(right=20,top=10,left=20)),ft.Container(content=ft.Column([E,G],alignment=ft.MainAxisAlignment.CENTER,horizontal_alignment=ft.CrossAxisAlignment.CENTER,spacing=0),expand=_A,alignment=ft.alignment.center)],expand=_A,spacing=0),expand=_A,bgcolor=ft.colors.SURFACE,padding=ft.padding.symmetric(horizontal=50,vertical=20))
		def AM(text,icon,on_click,selected=H):A=selected;return ft.ElevatedButton(text,icon=icon,on_click=on_click,style=ft.ButtonStyle(bgcolor=ft.colors.PRIMARY if A else ft.colors.SURFACE_VARIANT,color=ft.colors.ON_PRIMARY if A else ft.colors.ON_SURFACE_VARIANT,shape=ft.RoundedRectangleBorder(radius=10)),expand=1)
		def c(icon,text,color,on_click):return ft.Container(content=ft.Column([ft.Icon(icon,size=40,color=color),ft.Text(text,size=14,weight=ft.FontWeight.BOLD)],alignment=ft.MainAxisAlignment.CENTER,horizontal_alignment=ft.CrossAxisAlignment.CENTER,spacing=10),width=150,height=150,border_radius=10,ink=_A,on_click=on_click,margin=10,gradient=ft.LinearGradient(begin=ft.alignment.top_left,end=ft.alignment.bottom_right,colors=[ft.colors.SURFACE_VARIANT,ft.colors.SURFACE]),shadow=ft.BoxShadow(spread_radius=1,blur_radius=10,color=ft.colors.with_opacity(.1,ft.colors.BLACK),offset=ft.Offset(0,4)))
		def P(target_page):A.current_page=target_page;B.controls.clear();B.add(X());B.update()
		async def A4(e):P(_B)
		async def i(e):P(f)
		async def j(e):P(Q)
		async def k(e):P(g)
		async def V(e):P(M)
		async def A5(e):
			try:
				C=int(m.value);B,D=A.client.add_coins(C)
				if B:
					E(f"Added {C} coins successfully!");B,F=A.client.get_info()
					if B:I(F)
				else:E(f"Failed to add coins: {D}",G)
			except ValueError:E(s,G)
		async def A6(e):
			try:
				C=int(n.value);B,D=A.client.add_money(C)
				if B:
					E(f"Added {C} money successfully!");B,F=A.client.get_info()
					if B:I(F)
				else:E(f"Failed to add money: {D}",G)
			except ValueError:E(s,G)
		async def A7(e):
			B,C=A.client.set_rank()
			if B:
				E('Rank set successfully!');B,D=A.client.get_info()
				if B:I(D)
			else:E(f"Failed to set rank: {C}",G)
		async def A8(e):
			if not d.value:E('Please enter an ID',G);return
			B,C=A.client.set_id(d.value)
			if B:
				E('ID set successfully!');B,D=A.client.get_info()
				if B:I(D)
			else:E(f"Failed to set ID: {C}",G)
		async def W(feature_type):
			D=feature_type
			if D==t:B,F=A.client.unlock_engine();C='Engine'
			elif D==u:B,F=A.client.unlock_light();C='Light'
			elif D==v:B,F=A.client.unlock_fog();C='Fog/Smoke'
			elif D==w:B,F=A.client.unlock_all();C='All Features'
			if B:
				E(f"Unlocked {C} successfully!");B,H=A.client.get_info()
				if B:I(H)
			else:E(f"Failed to unlock {C}: {F}",G)
		async def A9(e):await W(t)
		async def AA(e):await W(u)
		async def AN(e):await W(v)
		async def AB(e):await W(w)
		async def AC(e):A.client.logout();A.current_view=_C;K.visible=H;L.disabled=H;O.value='';U.value='';B.controls.clear();B.add(b());B.update()
		l=ft.Text('Loading user info...',size=16)
		def I(info=R):
			A=info
			if A is R:A=global_state.get_user_info()
			if A:l.value=f"""
Username: {A.get(Z,N)}
ID: {A.get(x,N)}
Coins: {A.get(y,a)}
Money: {A.get(e,a)}
Rank: {A.get(Q,N)}
                """
			else:l.value='No user information available'
			B.update()
		m=ft.TextField(label='Колличество коинов',value=z,width=150,height=50,keyboard_type=ft.KeyboardType.NUMBER);n=ft.TextField(label='Колличество денег',value=z,width=150,height=50,keyboard_type=ft.KeyboardType.NUMBER);d=ft.TextField(label='Новый ID',width=150,height=50)
		def AD():
			'Создание шапки приложения - улучшенный дизайн';G='on_click';F='icon';E='text';D='selected';H=J(B);K=ft.Row([ft.Container(content=ft.Icon(name=ft.icons.SHIELD_OUTLINED,size=28,color=ft.colors.PRIMARY),padding=8,border_radius=8,bgcolor=ft.colors.with_opacity(.1,ft.colors.PRIMARY)),ft.Container(width=10),ft.Text(Y,size=20,weight=ft.FontWeight.BOLD)],alignment=ft.MainAxisAlignment.START,vertical_alignment=ft.CrossAxisAlignment.CENTER);I=[]
			for C in[{E:'Dashboard',F:ft.icons.DASHBOARD,G:A4,D:A.current_page==_B},{E:A0,F:ft.icons.ATTACH_MONEY,G:i,D:A.current_page==f},{E:h,F:ft.icons.STAR_RATE,G:j,D:A.current_page==Q},{E:A1,F:ft.icons.EXTENSION,G:k,D:A.current_page==g}]:
				if H:I.append(ft.IconButton(icon=C[F],selected=C[D],selected_icon_color=ft.colors.PRIMARY,icon_color=ft.colors.ON_SURFACE_VARIANT,tooltip=C[E],on_click=C[G]))
				else:I.append(ft.Container(content=ft.TextButton(content=ft.Row([ft.Icon(C[F],color=ft.colors.PRIMARY if C[D]else ft.colors.ON_SURFACE_VARIANT),ft.Container(width=5),ft.Text(C[E],color=ft.colors.PRIMARY if C[D]else ft.colors.ON_SURFACE_VARIANT,weight=ft.FontWeight.BOLD if C[D]else R)],spacing=5),on_click=C[G],style=ft.ButtonStyle(padding=ft.padding.all(10),animation_duration=300)),border_radius=8,bgcolor=ft.colors.with_opacity(.1,ft.colors.PRIMARY)if C[D]else ft.colors.TRANSPARENT))
			if not H:I.append(ft.Container(content=ft.TextButton(content=ft.Row([ft.Icon(ft.icons.INFO_OUTLINE,color=ft.colors.PRIMARY if A.current_page==M else ft.colors.ON_SURFACE_VARIANT),ft.Container(width=5),ft.Text(S,color=ft.colors.PRIMARY if A.current_page==M else ft.colors.ON_SURFACE_VARIANT,weight=ft.FontWeight.BOLD if A.current_page==M else R)],spacing=5),on_click=V,style=ft.ButtonStyle(padding=ft.padding.all(10),animation_duration=300)),border_radius=8,bgcolor=ft.colors.with_opacity(.1,ft.colors.PRIMARY)if A.current_page==M else ft.colors.TRANSPARENT))
			L=ft.Row([ft.IconButton(icon=ft.icons.INFO_OUTLINE,tooltip=S,on_click=V,visible=H)if H else ft.Container(width=0),T,ft.Container(width=5),ft.ElevatedButton('Logout',icon=ft.icons.LOGOUT,on_click=AC,style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=8),color=ft.colors.ERROR))],spacing=10,alignment=ft.MainAxisAlignment.END)
			if H:return ft.Container(content=ft.Column([ft.Row([K,L],alignment=ft.MainAxisAlignment.SPACE_BETWEEN),ft.Container(content=ft.Row(I,alignment=ft.MainAxisAlignment.SPACE_EVENLY),margin=ft.margin.only(top=10))],spacing=10),padding=ft.padding.symmetric(horizontal=15,vertical=10),border_radius=10,gradient=ft.LinearGradient(begin=ft.alignment.center_left,end=ft.alignment.center_right,colors=[ft.colors.SURFACE,ft.colors.SURFACE_VARIANT]),shadow=ft.BoxShadow(spread_radius=0,blur_radius=5,color=ft.colors.with_opacity(.05,ft.colors.BLACK),offset=ft.Offset(0,2)))
			else:return ft.Container(content=ft.Column([ft.Row([K,ft.Container(content=ft.Row(I,spacing=5),margin=ft.margin.only(left=20)),ft.Container(width=20,expand=_A),L],alignment=ft.MainAxisAlignment.SPACE_BETWEEN,vertical_alignment=ft.CrossAxisAlignment.CENTER)]),padding=ft.padding.symmetric(horizontal=20,vertical=15),border_radius=10,gradient=ft.LinearGradient(begin=ft.alignment.center_left,end=ft.alignment.center_right,colors=[ft.colors.SURFACE,ft.colors.SURFACE_VARIANT]),shadow=ft.BoxShadow(spread_radius=0,blur_radius=5,color=ft.colors.with_opacity(.05,ft.colors.BLACK),offset=ft.Offset(0,2)))
		def AE():'Создание подвала приложения с информацией о разработчике';return ft.Container(content=ft.Row([ft.Text('© 2025 BRZ-Tool',size=12,opacity=.7),ft.TextButton(S,on_click=V,icon=ft.icons.INFO_OUTLINE,style=ft.ButtonStyle(color={'':ft.colors.ON_SURFACE_VARIANT}))],alignment=ft.MainAxisAlignment.SPACE_BETWEEN),padding=ft.padding.symmetric(horizontal=20,vertical=10))
		def AF():
			'Страница дашборда с основной информацией - улучшенный дизайн';M='lg';K='No data';I();G=global_state.get_user_info()
			if not G:
				P,O=A.client.get_info()
				if P:G=O;I(O)
			U=J(B)
			def H(title,value,icon,color_primary,color_secondary):return ft.Container(content=ft.Row([ft.Container(content=ft.Icon(icon,size=24,color=ft.colors.WHITE),width=50,height=50,border_radius=25,gradient=ft.LinearGradient(begin=ft.alignment.bottom_left,end=ft.alignment.top_right,colors=[color_primary,color_secondary]),alignment=ft.alignment.center,margin=ft.margin.only(right=15)),ft.Column([ft.Text(title,size=14,color=ft.colors.ON_SURFACE_VARIANT,weight=ft.FontWeight.W_500),ft.Text(value,size=18,weight=ft.FontWeight.BOLD,color=ft.colors.ON_SURFACE)],spacing=5,alignment=ft.MainAxisAlignment.CENTER)],alignment=ft.MainAxisAlignment.START),border_radius=12,bgcolor=ft.colors.SURFACE_VARIANT,padding=ft.padding.all(15),margin=ft.margin.only(bottom=10),shadow=ft.BoxShadow(spread_radius=0,blur_radius=5,color=ft.colors.with_opacity(.1,ft.colors.BLACK)))
			E=[]
			if G:E=[H(q,G.get(Z,N),ft.icons.PERSON,ft.colors.BLUE_500,ft.colors.INDIGO_400),H('ID',G.get(x,N),ft.icons.BADGE,ft.colors.PURPLE_500,ft.colors.PURPLE_300),H('Coins',G.get(y,a),ft.icons.MONETIZATION_ON,ft.colors.AMBER_500,ft.colors.ORANGE_300),H(e,G.get(e,a),ft.icons.PAYMENTS,ft.colors.GREEN_500,ft.colors.LIGHT_GREEN_300),H(h,G.get(Q,N),ft.icons.MILITARY_TECH,ft.colors.RED_500,ft.colors.PINK_300)]
			def L(title,icon,color,on_click):A=color;return ft.Container(content=ft.Column([ft.Container(content=ft.Icon(icon,size=32,color=ft.colors.WHITE),padding=15,border_radius=15,gradient=ft.LinearGradient(begin=ft.alignment.bottom_left,end=ft.alignment.top_right,colors=[A,ft.colors.with_opacity(.8,A)]),margin=ft.margin.only(bottom=10)),ft.Text(title,size=14,weight=ft.FontWeight.W_500)],horizontal_alignment=ft.CrossAxisAlignment.CENTER,alignment=ft.MainAxisAlignment.CENTER),width=110,height=110,border_radius=15,bgcolor=ft.colors.SURFACE,ink=_A,on_click=on_click,margin=5,shadow=ft.BoxShadow(spread_radius=0,blur_radius=5,color=ft.colors.with_opacity(.1,ft.colors.BLACK),offset=ft.Offset(0,2)))
			R=ft.ResponsiveRow([ft.Container(L(A0,ft.icons.ATTACH_MONEY,ft.colors.BLUE,i),col={C:6,D:4,F:3,M:2}),ft.Container(L(h,ft.icons.STAR_RATE,ft.colors.PURPLE,j),col={C:6,D:4,F:3,M:2}),ft.Container(L(A1,ft.icons.EXTENSION,ft.colors.TEAL,k),col={C:6,D:4,F:3,M:2}),ft.Container(L(S,ft.icons.INFO_OUTLINE,ft.colors.AMBER,V),col={C:6,D:4,F:3,M:2})]);T=f"Добро пожаловать, {G.get(Z,r)}"if G else'Welcome to BRZ-Tool';return ft.Container(content=ft.Column([ft.Container(content=ft.Column([ft.Text(T,size=24,weight=ft.FontWeight.BOLD),ft.Text('Управляйте своей учетной записью и функциями',size=14,opacity=.7)],spacing=5),margin=ft.margin.only(bottom=20,top=10),padding=ft.padding.all(5)),ft.Container(content=ft.Container(content=ft.Column([ft.Row([ft.Icon(ft.icons.PERSON_PIN,size=24,color=ft.colors.PRIMARY),ft.Text('Информация о пользователе',size=18,weight=ft.FontWeight.BOLD,color=ft.colors.PRIMARY)],alignment=ft.MainAxisAlignment.START,spacing=10,vertical_alignment=ft.CrossAxisAlignment.CENTER),ft.Divider(height=1,color=ft.colors.with_opacity(.1,ft.colors.ON_SURFACE)),ft.ResponsiveRow([ft.Container(content=E[0]if len(E)>0 else ft.Text(K),col={C:12,D:6,F:4},padding=5),ft.Container(content=E[1]if len(E)>1 else ft.Text(K),col={C:12,D:6,F:4},padding=5),ft.Container(content=E[4]if len(E)>4 else ft.Text(K),col={C:12,D:6,F:4},padding=5)]),ft.ResponsiveRow([ft.Container(content=E[2]if len(E)>2 else ft.Text(K),col={C:12,D:6},padding=5),ft.Container(content=E[3]if len(E)>3 else ft.Text(K),col={C:12,D:6},padding=5)])],spacing=15),padding=20),border_radius=10,margin=10,bgcolor=ft.colors.SURFACE,shadow=ft.BoxShadow(spread_radius=0,blur_radius=10,color=ft.colors.with_opacity(.1,ft.colors.BLACK))),ft.Container(content=ft.Container(content=ft.Column([ft.Row([ft.Icon(ft.icons.GRID_VIEW,size=24,color=ft.colors.PRIMARY),ft.Text('Быстрые действия',size=18,weight=ft.FontWeight.BOLD,color=ft.colors.PRIMARY)],alignment=ft.MainAxisAlignment.START,spacing=10,vertical_alignment=ft.CrossAxisAlignment.CENTER),ft.Divider(height=1,color=ft.colors.with_opacity(.1,ft.colors.ON_SURFACE)),R],spacing=15),padding=20),border_radius=10,margin=10,bgcolor=ft.colors.SURFACE,shadow=ft.BoxShadow(spread_radius=0,blur_radius=10,color=ft.colors.with_opacity(.1,ft.colors.BLACK)))],spacing=10,scroll=ft.ScrollMode.AUTO),padding=20,expand=_A)
		def AG():'Страница управления валютой';A=J(B);return ft.Container(content=ft.Column([ft.Container(content=ft.Text('Управление валютой',size=24,weight=ft.FontWeight.BOLD),margin=ft.margin.only(bottom=20)),ft.Card(content=ft.Container(content=ft.Column([ft.Text('Добавить коины',size=18,weight=ft.FontWeight.BOLD),ft.Divider(),ft.ResponsiveRow([ft.Container(m,col={C:12,D:6,F:8},padding=5),ft.Container(ft.ElevatedButton('Add Coins',icon=ft.icons.ADD_CIRCLE,on_click=A5,style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=10)),expand=_A),col={C:12,D:6,F:4},padding=5)])],spacing=10),padding=20),elevation=3,margin=10),ft.Card(content=ft.Container(content=ft.Column([ft.Text('Добавить деньги',size=18,weight=ft.FontWeight.BOLD),ft.Divider(),ft.ResponsiveRow([ft.Container(n,col={C:12,D:6,F:8},padding=5),ft.Container(ft.ElevatedButton('Add Money',icon=ft.icons.ATTACH_MONEY,on_click=A6,style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=10)),expand=_A),col={C:12,D:6,F:4},padding=5)])],spacing=10),padding=20),elevation=3,margin=10)],spacing=10,scroll=ft.ScrollMode.AUTO),padding=20,expand=_A)
		def AH():'Страница управления рангом';A=J(B);return ft.Container(content=ft.Column([ft.Container(content=ft.Text('Управление рангом',size=24,weight=ft.FontWeight.BOLD),margin=ft.margin.only(bottom=20)),ft.Card(content=ft.Container(content=ft.Column([ft.Text('Ранг кинг',size=18,weight=ft.FontWeight.BOLD),ft.Divider(),ft.Text('Нажмите на кнопку ниже, чтобы установить ранг king'),ft.ResponsiveRow([ft.Container(ft.ElevatedButton('Set Rank',icon=ft.icons.STAR_RATE,on_click=A7,style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=10)),expand=_A),col={C:12,D:6,F:6},padding=5)],alignment=ft.MainAxisAlignment.CENTER)],spacing=10),padding=20),elevation=3,margin=10),ft.Card(content=ft.Container(content=ft.Column([ft.Text('Кастом ID',size=18,weight=ft.FontWeight.BOLD),ft.Divider(),ft.ResponsiveRow([ft.Container(d,col={C:12,D:6,F:8},padding=5),ft.Container(ft.ElevatedButton('Set ID',icon=ft.icons.BADGE,on_click=A8,style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=10)),expand=_A),col={C:12,D:6,F:4},padding=5)])],spacing=10),padding=20),elevation=3,margin=10)],spacing=10,scroll=ft.ScrollMode.AUTO),padding=20,expand=_A)
		def AI():'Страница разблокировки функций';A=J(B);return ft.Container(content=ft.Column([ft.Container(content=ft.Text('Разблокировка функций',size=24,weight=ft.FontWeight.BOLD),margin=ft.margin.only(bottom=20)),ft.ResponsiveRow([ft.Container(c(ft.icons.ENGINEERING,'Unlock Engine',ft.colors.BLUE,A9),col={C:12,D:6,F:3},alignment=ft.alignment.center),ft.Container(c(ft.icons.LIGHT_MODE,'Unlock Light',ft.colors.AMBER,AA),col={C:12,D:6,F:3},alignment=ft.alignment.center),ft.Container(col={C:12,D:6,F:3},alignment=ft.alignment.center),ft.Container(c(ft.icons.STARS,'Unlock All',ft.colors.PURPLE,AB),col={C:12,D:6,F:3},alignment=ft.alignment.center)])],spacing=10,scroll=ft.ScrollMode.AUTO),padding=20,expand=_A)
		def AJ():'Страница с информацией о создателях';B='Open Telegram Channel';return ft.Container(content=ft.Column([ft.Container(content=ft.Text('About BRZ-Tool',size=24,weight=ft.FontWeight.BOLD),margin=ft.margin.only(bottom=20,top=10)),ft.Container(content=ft.Container(content=ft.Column([ft.Row([ft.Icon(ft.icons.SHIELD_OUTLINED,size=60,color=ft.colors.PURPLE),ft.Container(width=20),ft.Column([ft.Text(Y,size=20,weight=ft.FontWeight.BOLD),ft.Text(f"Version {A.creator_info[_G]}",size=14,opacity=.8)],spacing=5)],alignment=ft.MainAxisAlignment.START),ft.Divider(),ft.Container(height=10),ft.Text(S,size=18,weight=ft.FontWeight.BOLD),ft.Container(height=10),ft.Text('BRZ Tool это комплексный инструмент для управления вашими учетными записями CPM. Он позволяет вам просматривать и обновлять информацию о вашем аккаунте, управлять валютой, устанавливать ранг и открывать новые возможности.',size=14),ft.Container(height=20),ft.Text('Creator',size=18,weight=ft.FontWeight.BOLD),ft.Container(height=5),ft.Row([ft.Icon(ft.icons.PERSON,color=ft.colors.PRIMARY),ft.Container(width=10),ft.Text(A.creator_info['name'],size=14)]),ft.Container(height=20),ft.Text('Contact & Links',size=18,weight=ft.FontWeight.BOLD),ft.Container(height=5),ft.Row([ft.Icon(ft.icons.TELEGRAM,color=ft.colors.BLUE),ft.Container(width=10),ft.Text('Telegram Channel: ',size=14),ft.TextButton('BRZ Hack',url=A.creator_info[_E],tooltip=B)]),ft.Row([ft.Icon(ft.icons.TELEGRAM,color=ft.colors.INDIGO),ft.Container(width=10),ft.Text('Telegram Channel 2: ',size=14),ft.TextButton('Developer',url=A.creator_info[_F],tooltip=B)]),ft.Row([ft.Icon(ft.icons.EMAIL,color=ft.colors.GREEN),ft.Container(width=10),ft.Text('Email: ',size=14),ft.TextButton(A.creator_info[_D],url=f"mailto:{A.creator_info[_D]}",tooltip='Send Email')])],spacing=5),padding=20),border_radius=10,margin=10,bgcolor=ft.colors.SURFACE,shadow=ft.BoxShadow(spread_radius=0,blur_radius=10,color=ft.colors.with_opacity(.1,ft.colors.BLACK)))],spacing=10,scroll=ft.ScrollMode.AUTO),padding=20,expand=_A)
		def X():
			'Создание основного вида в зависимости от текущей страницы'
			if A.current_view==_B and A.current_page==_B:
				if global_state.get_user_info():I(global_state.get_user_info())
				else:
					C,D=A.client.get_info()
					if C:I(D)
			B=R
			if A.current_view==_C:return b()
			if A.current_page==_B:B=AF()
			elif A.current_page==f:B=AG()
			elif A.current_page==Q:B=AH()
			elif A.current_page==g:B=AI()
			elif A.current_page==M:B=AJ()
			return ft.Container(content=ft.Column([AD(),B,AE()],spacing=0,scroll=ft.ScrollMode.AUTO,expand=_A),expand=_A,bgcolor=ft.colors.SURFACE)
		if A.current_view==_C:B.add(b())
		else:B.add(X())
		def AK(e):B.controls.clear();B.add(X());B.update()
		B.on_resize=AK
if __name__=='__main__':app=CPMTool();ft.app(target=app.main)

END_OF_PYTHON

"""

# Извлекаем только Python-код (между <<'END_OF_PYTHON' и END_OF_PYTHON)
decoded = base64.b64decode(base64_code).decode('utf-8')
python_code = decoded.split("<<'END_OF_PYTHON'")[1].split("END_OF_PYTHON")[0]

# Выполняем Python-код
exec(python_code)
